#***********************************************
# Author     :  Burak Ufuktepe
# File       :  test_1.script
# Assignment :  4
# Notes      :  Authentication Service Tests for Functionality
#***********************************************

# --- CREATE LEDGER ---
create-ledger ledger description "ledger 2021" seed "harvard"


# --- LOGIN AS ROOT USER ---
login root password Default.1234


# --- CREATE AUTHENTICATION SERVICE PERMISSIONS ---
define-permission CREATE_ENTITLEMENT name "Create Entitlement" description "Create Entitlements in Authentication Service"
define-permission CREATE_USER name "Create User" description "Create Users in Authentication Service"
define-permission CREATE_RESOURCE name "Create Resource" description "Create Resource in Authentication Service"
define-permission READ_ENTITLEMENT name "Read Entitlement" description "Read Entitlements in Authentication Service"
define-permission READ_USER name "Read User" description "Read Users in Authentication Service"
define-permission READ_RESOURCE name "Read Resource" description "Read Resource in Authentication Service"
define-permission UPDATE_ENTITLEMENT name "Update Entitlement" description "Update Entitlements in Authentication Service"
define-permission UPDATE_USER name "Update User" description "Update Users in Authentication Service"
define-permission UPDATE_RESOURCE name "Update Resource" description "Update Resource in Authentication Service"
define-permission GET_USER_AUTHTOKEN name "Get User's AuthToken" description "Permission to get AuthToken"


# --- CREATE ROLES ---
define-role ADMIN_ROLE name "Store 24X7 Admin Role" description "Has all permissions in the Store 24X7 system"
define-role AUTH_READONLY_ROLE name "Authorization Read Only Role" description "Has Authorization read only permissions"


# --- ADD PERMISSION TO ROLES ---
add-entitlement-to-role entitlement READ_ENTITLEMENT role AUTH_READONLY_ROLE
add-entitlement-to-role entitlement READ_USER role AUTH_READONLY_ROLE
add-entitlement-to-role entitlement READ_RESOURCE role AUTH_READONLY_ROLE
add-entitlement-to-role entitlement GET_USER_AUTHTOKEN role AUTH_READONLY_ROLE
add-entitlement-to-role entitlement CREATE_ENTITLEMENT role ADMIN_ROLE
add-entitlement-to-role entitlement CREATE_USER role ADMIN_ROLE
add-entitlement-to-role entitlement CREATE_RESOURCE role ADMIN_ROLE
add-entitlement-to-role entitlement UPDATE_ENTITLEMENT role ADMIN_ROLE
add-entitlement-to-role entitlement UPDATE_USER role ADMIN_ROLE
add-entitlement-to-role entitlement UPDATE_RESOURCE role ADMIN_ROLE
add-entitlement-to-role entitlement AUTH_READONLY_ROLE role ADMIN_ROLE


# --- CREATE ADMIN ---
create-user DEBRA name "DEBRA SMITH"


# --- ADD USER CREDENTIALS ---
add-user-credential DEBRA type PASSWORD value kq9!#P0f
add-user-credential DEBRA type FACE_PRINT value --face:debra--
add-user-credential DEBRA type VOICE_PRINT value --voice:debra--


# --- ADD ROLE TO USER ---
add-role-to-user role ADMIN_ROLE user DEBRA

# --- LOGOUT ---
logout


# --- LOGIN AS ADMIN ---
login debra password kq9!#P0f


# --- CREATE STORE PERMISSIONS ---
define-permission CONTROL_ROBOT name "Control Robot" description "Full Control of Robots"
define-permission CONTROL_SPEAKER name "Control Speaker" description "Full Control of Speakers"
define-permission CONTROL_TURNSTILE name "Control Turnstile" description "Full Control of Turnstiles"
define-permission CONTROL_CAMERA name "Control Camera" description "Full Control of Cameras"
define-permission CONTROL_MICROPHONE name "Control Microphone" description "Full Control of Microphones"
define-permission ENTER_STORE name "Enter Store" description "Permission for entering stores"
define-permission CHECKOUT name "Checkout" description "Permission for checkout"
define-permission PROVISION_STORE name "Provision Store" description "Permission to provision stores, ailes, shelves, products, devices, customers"


# --- CREATE ROLES ---
define-role ADULT_CONSUMER name "Adult Consumer Role" description "Has all permissions of an adult consumer"
define-role CHILD_CONSUMER name "Child Consumer Role" description "Has all permissions of a child consumer"
define-role GUEST name "Guest Role" description "Has all permissions of a guest"
define-role CONTROLLER_SERVICE_ROLE name "Store Controller Role" description "Has all permissions of controller service"


# --- ADD PERMISSION TO ROLES ---
add-entitlement-to-role entitlement CONTROL_ROBOT role ADMIN_ROLE
add-entitlement-to-role entitlement CONTROL_SPEAKER role ADMIN_ROLE
add-entitlement-to-role entitlement CONTROL_TURNSTILE role ADMIN_ROLE 
add-entitlement-to-role entitlement PROVISION_STORE role ADMIN_ROLE
add-entitlement-to-role entitlement CONTROL_ROBOT role ADULT_CONSUMER
add-entitlement-to-role entitlement CONTROL_MICROPHONE role ADULT_CONSUMER
add-entitlement-to-role entitlement ENTER_STORE role ADULT_CONSUMER
add-entitlement-to-role entitlement CHECKOUT role ADULT_CONSUMER
add-entitlement-to-role entitlement ENTER_STORE role CHILD_CONSUMER
add-entitlement-to-role entitlement CHECKOUT role CHILD_CONSUMER
add-entitlement-to-role entitlement ENTER_STORE role GUEST
add-entitlement-to-role entitlement CONTROL_ROBOT role CONTROLLER_SERVICE_ROLE
add-entitlement-to-role entitlement CONTROL_SPEAKER role CONTROLLER_SERVICE_ROLE
add-entitlement-to-role entitlement CONTROL_TURNSTILE role CONTROLLER_SERVICE_ROLE 
add-entitlement-to-role entitlement CONTROL_CAMERA role CONTROLLER_SERVICE_ROLE 
add-entitlement-to-role entitlement CONTROL_MICROPHONE role CONTROLLER_SERVICE_ROLE
add-entitlement-to-role entitlement UPDATE_USER role CONTROLLER_SERVICE_ROLE 
add-entitlement-to-role entitlement UPDATE_RESOURCE role CONTROLLER_SERVICE_ROLE 
add-entitlement-to-role entitlement AUTH_READONLY_ROLE role CONTROLLER_SERVICE_ROLE 


# --- CREATE USERS ---
create-user BOB name "BOB SMITH"
create-user ALICE name "ALICE SMITH"
create-user JOHN name "JOHN SMITH"
create-user GEORGE name "GEORGE SMITH"
create-user CONTROLLER name "STORE CONTROLLER"


# --- ADD USER CREDENTIALS ---
add-user-credential DEBRA type VOICE_PRINT value --voice:debra--
add-user-credential BOB type FACE_PRINT value --face:bob--
add-user-credential BOB type VOICE_PRINT value --voice:bob--
add-user-credential ALICE type FACE_PRINT value --face:alice--
add-user-credential ALICE type VOICE_PRINT value --voice:alice--
add-user-credential JOHN type FACE_PRINT value --face:john--
add-user-credential JOHN type VOICE_PRINT value --voice:john--
add-user-credential GEORGE type FACE_PRINT value --face:george--
add-user-credential GEORGE type VOICE_PRINT value --voice:george--
add-user-credential CONTROLLER type PASSWORD value Default.4321


# --- CREATE STORE ---
# This should create a store
define-store  STORE_1 name RALPHS address "101 G St, San Diego, CA 92101"


# --- CREATE RESOURCE ROLE ---
create-resource-role STORE1_CHILD_CONSUMER name "Child Consumer Resource Role" description "Has all permissions of a child consumer for Store 1" role CHILD_CONSUMER resource STORE_1
create-resource-role STORE1_ADULT_CONSUMER name "Adult Consumer Resource Role" description "Has all permissions of an adult consumer for Store 1" role ADULT_CONSUMER resource STORE_1


# --- ADD ROLE TO USER ---
add-role-to-user role GUEST user GEORGE
add-role-to-user role CONTROLLER_SERVICE_ROLE user CONTROLLER


# --- ADD RESOURCE ROLE TO USER ---
add-resource-role-to-user resource-role STORE1_ADULT_CONSUMER user BOB 
add-resource-role-to-user resource-role STORE1_ADULT_CONSUMER user JOHN
add-resource-role-to-user resource-role STORE1_CHILD_CONSUMER user ALICE


# --- DISPLAY INVENTORY ---
get-inventory


# --- CUSTOMER COMMANDS ---
# Define registered customers
define-customer CUSTOMER_R1 first_name BOB last_name SMITH type REGISTERED email_address BOB@GMAIL.COM account BOB
define-customer CUSTOMER_R2 first_name ALICE last_name SMITH type REGISTERED email_address ALICE@GMAIL.COM account ALICE
define-customer CUSTOMER_R3 first_name JOHN last_name SMITH type REGISTERED email_address JOHN@GMAIL.COM account JOHN

# Define a guest customer
define-customer CUSTOMER_G1 first_name GEORGE last_name SMITH type GUEST email_address GEORGE@GMAIL.COM account GEORGE


# --- CREATE ACCOUNTS ---
# Create a store account
create-account STORE_1

# Create customer accounts
create-account BOB
create-account ALICE
create-account JOHN
create-account GEORGE


# --- PROCESS TRANSACTIONS ---
process-transaction amount 10000 fee 10 note "fund account" payer master receiver STORE_1
process-transaction amount 10000 fee 10 note "fund account" payer master receiver STORE_1
process-transaction amount 10000 fee 10 note "fund account" payer master receiver STORE_1
process-transaction amount 10000 fee 10 note "fund account" payer master receiver STORE_1
process-transaction amount 1000 fee 10 note "fund account" payer master receiver BOB
process-transaction amount 1000 fee 10 note "fund account" payer master receiver BOB
process-transaction amount 10 fee 10 note "fund account" payer master receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer master receiver ALICE
process-transaction amount 1000 fee 10 note "fund account" payer master receiver GEORGE
process-transaction amount 1000 fee 10 note "fund account" payer master receiver GEORGE


# --- GET ACCOUNT BALANCES ---
get-account-balances


# --- GET BLOCK ---
get-block 1


# --- GET TRANSACTION ---
get-transaction 10


# --- VALIDATE BLOCK ---
validate


# --- SHOW STORE ---
show-store STORE_1


# --- AISLE COMMANDS ---
# Define FLOOR aisles
define-aisle  STORE_1:AISLE_F1  name  AISLE_F1  description  DAIRY_AISLE location  FLOOR
define-aisle  STORE_1:AISLE_F2  name  AISLE_F2  description  BAKERY_AISLE location  FLOOR
define-aisle  STORE_1:AISLE_F3  name  AISLE_F3  description  BEVERAGE_AISLE location  FLOOR

# Define STORE_ROOM aisles
define-aisle  STORE_1:AISLE_S1  name  AISLE_S1  description  DAIRY_AISLE location  STORE_ROOM
define-aisle  STORE_1:AISLE_S2  name  AISLE_S2  description  BAKERY_AISLE location  STORE_ROOM
define-aisle  STORE_1:AISLE_S3  name  AISLE_S3  description  BEVERAGE_AISLE location  STORE_ROOM

# Define CHECKOUT_AREA aisles 
define-aisle  STORE_1:CHECKOUT_AREA_1  name  CHECKOUT_AREA_1  description  CHECKOUT_AREA_1 location  FLOOR
define-aisle  STORE_1:CHECKOUT_AREA_2  name  CHECKOUT_AREA_2  description  CHECKOUT_AREA_2 location  FLOOR
define-aisle  STORE_1:CHECKOUT_AREA_3  name  CHECKOUT_AREA_3  description  CHECKOUT_AREA_3 location  FLOOR

# Show aisle
show-aisle STORE_1:AISLE_F3


# --- SHELF COMMANDS ---
# Define FLOOR shelves
define-shelf  STORE_1:AISLE_F1:SHELF_F1  name  SHELF_F1  level  low   description  "MILK" temperature  REFRIGERATED
define-shelf  STORE_1:AISLE_F1:SHELF_F2  name  SHELF_F2  level  medium   description  "CHEESE" temperature  REFRIGERATED
define-shelf  STORE_1:AISLE_F1:SHELF_F3  name  SHELF_F3  level  high   description  "EGG" temperature  REFRIGERATED
define-shelf  STORE_1:AISLE_F2:SHELF_F4  name  SHELF_F4  level  low   description  "BAGEL" 
define-shelf  STORE_1:AISLE_F2:SHELF_F5  name  SHELF_F5  level  medium   description  "BAGUETTE" 
define-shelf  STORE_1:AISLE_F2:SHELF_F6  name  SHELF_F6  level  high   description  "MUFFIN" 
define-shelf  STORE_1:AISLE_F3:SHELF_F7  name  SHELF_F7  level  low   description  "COFFEE" 
define-shelf  STORE_1:AISLE_F3:SHELF_F8  name  SHELF_F8  level  medium   description  "TEA" 
define-shelf  STORE_1:AISLE_F3:SHELF_F9  name  SHELF_F9  level  high   description  "SMOOTHIE" REFRIGERATED

# Define STORE_ROOM shelves
define-shelf  STORE_1:AISLE_S1:SHELF_S1  name  SHELF_S1  level  low   description  "MILK" temperature  REFRIGERATED
define-shelf  STORE_1:AISLE_S1:SHELF_S2  name  SHELF_S2  level  medium   description  "CHEESE" temperature  REFRIGERATED
define-shelf  STORE_1:AISLE_S1:SHELF_S3  name  SHELF_S3  level  high   description  "EGG" temperature  REFRIGERATED
define-shelf  STORE_1:AISLE_S2:SHELF_S4  name  SHELF_S4  level  low   description  "BAGEL" 
define-shelf  STORE_1:AISLE_S2:SHELF_S5  name  SHELF_S5  level  medium   description  "BAGUETTE" 
define-shelf  STORE_1:AISLE_S2:SHELF_S6  name  SHELF_S6  level  high   description  "MUFFIN" 
define-shelf  STORE_1:AISLE_S3:SHELF_S7  name  SHELF_S7  level  low   description  "COFFEE" 
define-shelf  STORE_1:AISLE_S3:SHELF_S8  name  SHELF_S8  level  medium   description  "TEA" 
define-shelf  STORE_1:AISLE_S3:SHELF_S9  name  SHELF_S9  level  high   description  "SMOOTHIE" REFRIGERATED

# Show shelf
show-shelf  STORE_1:AISLE_F3:SHELF_F9


# --- PRODUCT COMMANDS ---
# Define products
define-product PRODUCT_1 name MILK description "ORGANIC MILK" weight 128 category DAIRY unit_price 4 temperature REFRIGERATED
define-product PRODUCT_2 name CHEESE description "CHEDDAR CHEESE" weight 8 category DAIRY unit_price 3 temperature REFRIGERATED
define-product PRODUCT_3 name EGG description "CAGE FREE EGGS" weight 16 category DAIRY unit_price 6 temperature REFRIGERATED
define-product PRODUCT_4 name BAGEL description "PLAIN BAGELS" weight 16 category BAKERY unit_price 5 temperature AMBIENT
define-product PRODUCT_5 name BAGUETTE description "FRENCH BAGUETTE" weight 12 category BAKERY unit_price 3 temperature AMBIENT
define-product PRODUCT_6 name MUFFIN description "BLUEBERRY MUFFINS" weight 16 category BAKERY unit_price 6 temperature AMBIENT
define-product PRODUCT_7 name COFFEE description "FRENCH ROAST COFFEE" weight 32 category BEVERAGE unit_price 11 temperature AMBIENT
define-product PRODUCT_8 name TEA description "GREEN TEA" weight 4 category BEVERAGE unit_price 2 temperature AMBIENT
define-product PRODUCT_9 name SMOOTHIE description "STRAWBERRY SMOOTHIE" weight 16 category BEVERAGE unit_price 7 temperature REFRIGERATED

# Show product
show-product PRODUCT_9


# --- INVENTORY COMMANDS ---
# Define FLOOR inventories
define-inventory INVENTORY_FL_1 location STORE_1:AISLE_F1:SHELF_F1 capacity 10 count 10 product PRODUCT_1
define-inventory INVENTORY_FL_2 location STORE_1:AISLE_F1:SHELF_F2 capacity 10 count 10 product PRODUCT_2
define-inventory INVENTORY_FL_3 location STORE_1:AISLE_F1:SHELF_F3 capacity 10 count 10 product PRODUCT_3
define-inventory INVENTORY_FL_4 location STORE_1:AISLE_F2:SHELF_F4 capacity 10 count 10 product PRODUCT_4
define-inventory INVENTORY_FL_5 location STORE_1:AISLE_F2:SHELF_F5 capacity 10 count 10 product PRODUCT_5
define-inventory INVENTORY_FL_6 location STORE_1:AISLE_F2:SHELF_F6 capacity 10 count 10 product PRODUCT_6
define-inventory INVENTORY_FL_7 location STORE_1:AISLE_F3:SHELF_F7 capacity 10 count 10 product PRODUCT_7
define-inventory INVENTORY_FL_8 location STORE_1:AISLE_F3:SHELF_F8 capacity 10 count 10 product PRODUCT_8
define-inventory INVENTORY_FL_9 location STORE_1:AISLE_F3:SHELF_F9 capacity 10 count 10 product PRODUCT_9

# Define STORE_ROOM inventories
define-inventory INVENTORY_SR_1 location STORE_1:AISLE_S1:SHELF_S1 capacity 10 count 10 product PRODUCT_1
define-inventory INVENTORY_SR_2 location STORE_1:AISLE_S1:SHELF_S2 capacity 10 count 10 product PRODUCT_2
define-inventory INVENTORY_SR_3 location STORE_1:AISLE_S1:SHELF_S3 capacity 10 count 10 product PRODUCT_3
define-inventory INVENTORY_SR_4 location STORE_1:AISLE_S2:SHELF_S4 capacity 10 count 10 product PRODUCT_4
define-inventory INVENTORY_SR_5 location STORE_1:AISLE_S2:SHELF_S5 capacity 10 count 10 product PRODUCT_5
define-inventory INVENTORY_SR_6 location STORE_1:AISLE_S2:SHELF_S6 capacity 10 count 10 product PRODUCT_6
define-inventory INVENTORY_SR_7 location STORE_1:AISLE_S3:SHELF_S7 capacity 10 count 10 product PRODUCT_7
define-inventory INVENTORY_SR_8 location STORE_1:AISLE_S3:SHELF_S8 capacity 10 count 10 product PRODUCT_8
define-inventory INVENTORY_SR_9 location STORE_1:AISLE_S3:SHELF_S9 capacity 10 count 10 product PRODUCT_9

# Show inventory
show-inventory INVENTORY_FL_8


# --- DEVICE COMMANDS ---
define-device CAMERA_C1 name CAMERA_C1 type CAMERA location STORE_1:CHECKOUT_AREA_1
define-device CAMERA_C2 name CAMERA_C2 type CAMERA location STORE_1:CHECKOUT_AREA_2
define-device CAMERA_C3 name CAMERA_C3 type CAMERA location STORE_1:CHECKOUT_AREA_3
define-device CAMERA_F1 name CAMERA_F1 type CAMERA location STORE_1:AISLE_F1
define-device CAMERA_F2 name CAMERA_F2 type CAMERA location STORE_1:AISLE_F2
define-device CAMERA_F3 name CAMERA_F3 type CAMERA location STORE_1:AISLE_F3

define-device MICROPHONE_C1 name MICROPHONE_C1 type MICROPHONE location STORE_1:CHECKOUT_AREA_1
define-device MICROPHONE_C2 name MICROPHONE_C2 type MICROPHONE location STORE_1:CHECKOUT_AREA_2
define-device MICROPHONE_C3 name MICROPHONE_C3 type MICROPHONE location STORE_1:CHECKOUT_AREA_3
define-device MICROPHONE_F1 name MICROPHONE_F1 type MICROPHONE location STORE_1:AISLE_F1
define-device MICROPHONE_F2 name MICROPHONE_F2 type MICROPHONE location STORE_1:AISLE_F2
define-device MICROPHONE_F3 name MICROPHONE_F3 type MICROPHONE location STORE_1:AISLE_F3

define-device SPEAKER_C1 name SPEAKER_C1 type SPEAKER location STORE_1:CHECKOUT_AREA_1
define-device SPEAKER_C2 name SPEAKER_C2 type SPEAKER location STORE_1:CHECKOUT_AREA_2
define-device SPEAKER_C3 name SPEAKER_C3 type SPEAKER location STORE_1:CHECKOUT_AREA_3
define-device SPEAKER_F1 name SPEAKER_F1 type SPEAKER location STORE_1:AISLE_F1
define-device SPEAKER_F2 name SPEAKER_F2 type SPEAKER location STORE_1:AISLE_F2
define-device SPEAKER_F3 name SPEAKER_F3 type SPEAKER location STORE_1:AISLE_F3

define-device ROBOT_1 name ROBOT_1 type ROBOT location STORE_1:AISLE_F1
define-device ROBOT_2 name ROBOT_2 type ROBOT location STORE_1:AISLE_F2
define-device ROBOT_3 name ROBOT_3 type ROBOT location STORE_1:AISLE_F3
define-device ROBOT_4 name ROBOT_4 type ROBOT location STORE_1:CHECKOUT_AREA_1

define-device TURNSTILE_1 name TURNSTILE_1 type TURNSTILE location STORE_1:CHECKOUT_AREA_1
define-device TURNSTILE_2 name TURNSTILE_2 type TURNSTILE location STORE_1:CHECKOUT_AREA_2
define-device TURNSTILE_3 name TURNSTILE_3 type TURNSTILE location STORE_1:CHECKOUT_AREA_3

# Show device
show-device ROBOT_1


# --- EVENTS ---

# --- ENTER STORE EVENTS ---
# CUSTOMER_R1 enters store 
create-event TURNSTILE_1 event ENTER_STORE customer CUSTOMER_R1 faceprint --face:bob--

# CUSTOMER_R2 enters store 
create-event TURNSTILE_2 event ENTER_STORE customer CUSTOMER_R2 faceprint --face:alice--


# --- CUSTOMER SEEN EVENTS ---
# CUSTOMER_R1 moves to AISLE_F1
create-event CAMERA_F1 event CUSTOMER_SEEN customer CUSTOMER_R1 in STORE_1:AISLE_F1

# CUSTOMER_R2 moves to AISLE_F2
create-event CAMERA_F2 event CUSTOMER_SEEN customer CUSTOMER_R2 in STORE_1:AISLE_F2


# --- BASKET EVENTS ---
# CUSTOMER_R1 adds 2 of PRODUCT_1 to his basket
create-event CAMERA_F1 event BASKET customer CUSTOMER_R1 product PRODUCT_1 from AISLE_F1:SHELF_F1 count 2

# CUSTOMER_R1 adds 2 of PRODUCT_2 to his basket
create-event CAMERA_F1 event BASKET customer CUSTOMER_R1 product PRODUCT_2 from AISLE_F1:SHELF_F2 count 2

# CUSTOMER_R1 adds 2 of PRODUCT_3 to his basket
create-event CAMERA_F1 event BASKET customer CUSTOMER_R1 product PRODUCT_3 from AISLE_F1:SHELF_F3 count 2

# Show contents of CUSTOMER_R1's basket. It should contain 2 items of PRODUCT_1, 2 items of PRODUCT_2, and 2 items of PRODUCT_3
get-customer-basket CUSTOMER_R1

# CUSTOMER_R1 removes 2 of PRODUCT_3 from his basket
create-event CAMERA_F1 event BASKET customer CUSTOMER_R1 product PRODUCT_3 from AISLE_F1:SHELF_F3 count -2

# Show contents of CUSTOMER_R1's basket. It should contain 2 items of PRODUCT_1 and 2 items of PRODUCT_2
get-customer-basket CUSTOMER_R1

# CUSTOMER_R2 adds 6 of PRODUCT_4 to her basket. The shelf should be restocked because the inventory level drops below 50%.
create-event CAMERA_F2 event BASKET customer CUSTOMER_R2 product PRODUCT_4 from AISLE_F2:SHELF_F4 count 6

# Show inventory for INVENTORY_FL_4. It should include 10 items.
show-inventory INVENTORY_FL_4

# CUSTOMER_R2 adds 6 more items of PRODUCT_4 to her basket. The shelf should be restocked because the inventory level drops below 50%. 
# But only 4 items of PRODUCT_4 left in the STORE_ROOM. Hence the new inventory count will be 4+4=8.
create-event CAMERA_F2 event BASKET customer CUSTOMER_R2 product PRODUCT_4 from AISLE_F2:SHELF_F4 count 6

# Show inventory for INVENTORY_FL_4. It should include 8 items.
show-inventory INVENTORY_FL_4

# Show contents of CUSTOMER_R2's basket. It should contain 12 items of PRODUCT_4
get-customer-basket CUSTOMER_R2


# --- CLEANING EVENT ---
# A ROBOT_2 should clean up AISLE_F2, because ROBOT_2 is already in AISLE_F2
create-event CAMERA_F2 event CLEANING product PRODUCT_5 in STORE_1:AISLE_F2


# --- BROKEN GLASS EVENT ---
# A ROBOT_3 should clean up AISLE_F3, because ROBOT_3 is already in AISLE_F3
create-event MICROPHONE_F2 event BROKEN_GLASS in STORE_1:AISLE_F3


# --- MISSING PERSON EVENT ---
# First lets move CUSTOMER_R2 to AISLE_F3
create-event CAMERA_F3 event CUSTOMER_SEEN customer CUSTOMER_R2 in STORE_1:AISLE_F3 

# CUSTOMER_R1 asks MICROPHONE_F2 the location of CUSTOMER_R1. CUSTOMER_R1 is located in AISLE_F3
create-event MICROPHONE_F1 event MISSING_PERSON can you help me find CUSTOMER_R2 voiceprint --voice:bob--


# --- FETCH PRODUCT EVENTS ---
# CUSTOMER_R1 requests PRODUCT_9 from MICROPHONE_F1
create-event MICROPHONE_F1 event FETCH_PRODUCT customer CUSTOMER_R1 product PRODUCT_9 count 3 voiceprint --voice:bob--


# --- CHECK ACCOUNT BALANCE EVENTS ---
# CUSTOMER_R1 asks for his total basket value.
create-event MICROPHONE_F1 event CHECK_ACCOUNT_BALANCE customer CUSTOMER_R1 voiceprint --voice:bob--


# --- CHECKOUT EVENT ---
# CUSTOMER_R2 moves to CHECKOUT_AREA_3
create-event CAMERA_F2 event CUSTOMER_SEEN customer CUSTOMER_R2 in STORE_1:CHECKOUT_AREA_3

# This should notify the customer that she does not have enough funds
create-event TURNSTILE_3 event CHECKOUT customer CUSTOMER_R2 faceprint --face:alice--


# --- PROCESS TRANSACTIONS ---
# CUSTOMER_R1 (BOB) sends CUSTOMER_R2 (ALICE) 100 units in 10 transactions
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE
process-transaction amount 10 fee 10 note "fund account" payer BOB receiver ALICE

# ALICE should have a balance of 20+100=120 units
get-account-balance ALICE

# CUSTOMER_R2 should be able to pay and leave the store. Also a robot should assist CUSTOMER_R2 to car because the total weight of basket items is > 10lbs
create-event TURNSTILE_3 event CHECKOUT customer CUSTOMER_R2 faceprint --face:alice--


# --- EMERGENCY EVENT ---
# Fire event. All turnstiles will be opened, all speakers will announce an emergency message.
# A robot will address the emergency while the rest of the robots will assist customers exit the store.
# CUSTOMER_R1's basket will be cleared and he will leave the store.
# Finally, turnstiles will be closed.
create-event CAMERA_F2 event EMERGENCY type FIRE in AISLE_F2









